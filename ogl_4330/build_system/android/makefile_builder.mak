#
# This confidential and proprietary software may be used only as
# authorised by a licensing agreement from ARM Limited
# (C) COPYRIGHT 2010-2012 ARM Limited
# ALL RIGHTS RESERVED
# The entire notice above must be reproduced on all authorised
# copies and copies may only be made to the extent permitted
# by a licensing agreement from ARM Limited.
#
#

define append-file
	$(Q)cat build_system/android/$1 >> $2
	$(Q)echo "" >> $2
endef

define begin-new-file
	$(Q)echo -n "" > $1
	$(if $(filter %.c,$1), $(call append-file,legal.c.template,$1), $(call append-file,legal.make.template,$1))
endef

# note! $(if cond,if-branch,else-branch) function executes the if-branch when cond is a non-empty string.
# that is, e.g. both 0 and 1 are non-empty strings. should use if(n)eq-directive instead.

MALI_ANDROID_BUILD_INFO_FILE := ./_mali_build_info.c
COMP_SRC = $(MALI400_COMPILER_SRCS) $(filter-out $(MALI400_COMPILER_SRCS),$(SHADERGEN_SRCS))
REAL_COMPILER_SRC = $(filter %.c,$(COMP_SRC)) $(subst .vertp,.c,$(filter %.vertp,$(COMP_SRC))) $(subst .rw,.c,$(filter %.rw,$(COMP_SRC)))

# strip out the khronos search paths
MALI_SEARCH_PATH_STRIPPED = $(filter-out %khronos, $(MALI_SEARCH_PATH))

$(MALI_ANDROID_BUILD_INFO_FILE):
	$(call $(quiet)cmd-echo-build,GENERATING,$@)
	$(call begin-new-file,$@)
	$(Q)echo "char* __mali_build_info(void) { return \"mali: ${VERSION_BUILD_STRINGS} \"; }" >> $@

.PHONY: touch_src
touch_src:
	$(call $(quiet)cmd-echo-build,TOUCHING,"./*")
	-@find . -name "*.c" -exec touch {} \;
	-@find . -name "*.cpp" -exec touch {} \;
	-@find . -name "*.h" -exec touch {} \;
	-@find . -name "*ake*" -exec touch {} \;
	-@find . -name "*.mk" -exec touch {} \;

.PHONY: Android.mk
Android.mk: compiler_autogenerated_files touch_src $(MALI_ANDROID_BUILD_INFO_FILE)
	$(call $(quiet)cmd-echo-build,GENERATING,$@)
	$(call begin-new-file,$@)
	$(Q)echo "LOCAL_PATH:=\$$(call my-dir)" >> $@
	$(Q)echo "MALI_EGL_MAJOR_VERSION:=$(MALI_EGL_MAJOR_VERSION)" >> $@
	$(Q)echo "MALI_EGL_MINOR_VERSION:=$(MALI_EGL_MINOR_VERSION)" >> $@
	$(Q)echo "MALI_GLES_1_MAJOR_VERSION:=$(MALI_GLES_1_MAJOR_VERSION)" >> $@
	$(Q)echo "MALI_GLES_1_MINOR_VERSION:=$(MALI_GLES_1_MINOR_VERSION)" >> $@
	$(Q)echo "MALI_GLES_2_MAJOR_VERSION:=$(MALI_GLES_2_MAJOR_VERSION)" >> $@
	$(Q)echo "MALI_GLES_2_MINOR_VERSION:=$(MALI_GLES_2_MINOR_VERSION)" >> $@
	$(Q)echo "MALI_VG_MAJOR_VERSION:=$(MALI_VG_MAJOR_VERSION)" >> $@
	$(Q)echo "MALI_VG_MINOR_VERSION:=$(MALI_VG_MINOR_VERSION)" >> $@
	$(Q)echo "" >> $@
	$(call make-android-build-info-file)
	$(Q)echo "MALI_ANDROID_BUILD_INFO_FILE=$(MALI_ANDROID_BUILD_INFO_FILE)" >> $@
	$(Q)echo "MALI_EGL_SRCS=$(filter-out %build_info.c,$(EGL_SRCS))" >> $@
	$(Q)echo "MALI_EGL_SRCS_SHIM=$(filter-out %build_info.c,$(EGL_SRCS_SHIM))" >> $@
	$(Q)echo "MALI_SHARED_SRCS=$(filter-out %build_info.c,$(SHARED_SRCS) $(TOOLCHAIN_SPECIFIC_SHARED_SRCS))" >> $@
	$(Q)echo "MALI_VG_SRCS=$(filter-out %build_info.c,$(VG_SRCS) $(VGU_SRCS) $(HAL_SRCS))" >> $@
	$(Q)echo "MALI_BASE_SRCS=$(filter-out %build_info.c,$(BASE_SRCS) $(TOOLCHAIN_SPECIFIC_BASE_SRCS))" >> $@
	$(Q)echo "MALI_INSTRUMENTED_SRCS=$(filter-out %build_info.c,$(INSTRUMENTED_SRCS))" >> $@
	$(Q)echo "MALI_GLES_COMMON_SRCS=$(filter-out %build_info.c,$(OPENGLES_CORE_SRCS) $(FRAGMENT_BACKEND_SRCS) $(GLES_GB_SRCS))" >> $@
	$(Q)echo "MALI_GLES1_SRCS=$(filter-out %build_info.c,$(GLES1_SRCS) $(GLES_MALIGP2_M200_SG_SRCS))" >> $@
	$(Q)echo "MALI_GLES2_SRCS=$(filter-out %build_info.c,$(GLES2_SRCS))" >> $@
	$(Q)echo "MALI_GLES1_SRCS_SHIM=$(filter-out %build_info.c,$(OPENGLES_1_SRCS_SHIM))" >> $@
	$(Q)echo "MALI_GLES2_SRCS_SHIM=$(filter-out %build_info.c,$(OPENGLES_2_SRCS_SHIM))" >> $@
	$(Q)echo "MALI_MATH_SRCS=$(filter-out %build-info.c,$(MATH_SRCS))" >> $@
	$(Q)echo "MALI_COMPILER_SRCS=$(filter-out %build_info.c,$(REAL_COMPILER_SRC))" >> $@
	$(Q)echo "MALI_SEARCH_PATH=$(foreach path,$(MALI_SEARCH_PATH_STRIPPED),\$$(LOCAL_PATH)/$(path))" >> $@
	$(Q)echo "MALI_DEFINES=-UDEBUG -UNDEBUG $(MALI_DEFINES)" >> $@
	$(Q)echo "MALI_TRACING_FLAGS=$(GCC_TRACING_FLAGS)" >> $@
	$(Q)echo "MALI_LINK_DEFINES=$(MALI_LINK_DEFINES)" >> $@	
	$(Q)echo "UMP_SRCS=$(filter-out %build_info.c,$(UMP_SRCS))" >> $@
	$(Q)echo "UMP_LIB=$(UMP_LIB)" >> $@
	$(if $(MALI_MAKE_SUITE), $(Q)echo "TPI_API_SRCS=$(TPI_API_SRCS)" >> $@)
	$(Q)echo "" >> $@
	$(if $(MALI_MAKE_SUITE), $(Q)echo "UNIT_FRAMEWORK_SRCS=$(UNIT_FRAMEWORK_SRCS)" >> $@)
	$(Q)echo "" >> $@
	$(if $(MALI_BUILD_ANDROID_MONOLITHIC), $(call append-file,libMali_monolithic.template,$@), $(call append-file,libMali.template,$@))
	$(if $(MALI_MAKE_SUITE), $(call append-file,libtpi.template,$@))
	$(if $(MALI_MAKE_SUITE), $(call append-file,unit_framework.template,$@))
	$(if $(MALI_BUILD_UMP), $(call append-file,libUMP.template,$@))
	$(if $(USE_OPENGLES_1), $(if $(MALI_BUILD_ANDROID_MONOLITHIC), $(call append-file,gles11_monolithic.template,$@), $(call append-file,gles11.template,$@)))
	$(if $(USE_OPENGLES_2), $(if $(MALI_BUILD_ANDROID_MONOLITHIC), $(call append-file,gles20_monolithic.template,$@), $(call append-file,gles20.template,$@)))
	$(if $(USE_OPENGLES),   $(if $(MALI_BUILD_ANDROID_MONOLITHIC), $(call append-file,egl_monolithic.template,$@), $(call append-file,egl.template,$@)))

egl.cfg:
	$(call $(quiet)cmd-echo-build,GENERATING,$@)
	$(call begin-new-file,$@)
	$(Q)echo "0 0 android" >> $@
	$(Q)echo "0 1 vr" >> $@

