/*
 * This confidential and proprietary software may be used only as
 * authorised by a licensing agreement from ARM Limited
 * (C) COPYRIGHT 2007-2011 ARM Limited
 * ALL RIGHTS RESERVED
 * The entire notice above must be reproduced on all authorised
 * copies and copies may only be made to the extent permitted
 * by a licensing agreement from ARM Limited.
 */
/* This file is generated by the shader piece generator. */

#ifndef MALIGP2_SHADERGEN_PIECES_H
#define MALIGP2_SHADERGEN_PIECES_H

typedef struct {
    unsigned int data[4];
} instruction;

typedef struct {
    unsigned id;
    unsigned len;
    const instruction *ptr;
} piece;

typedef struct {
    unsigned address;
    float value;
} uniform_initializer;

#define VERTEX_UNIFORM_POS(name) (VERTEX_UNIFORM_POS_##name)
#define VERTEX_VARYING_POS(name) (VERTEX_VARYING_POS_##name)
#define VERTEX_ATTRIBUTE_POS(name) (VERTEX_ATTRIBUTE_POS_##name)

/* Phases */
#define VERTEX_PHASE_TRANSFORM 0
#define VERTEX_PHASE_LIGHTING 1
#define VERTEX_PHASE_TEXCOORDCOPY 2
#define VERTEX_PHASE_TEXCOORDREAD 3
#define VERTEX_PHASE_TEXCOORDWRITE 4
#define VERTEX_PHASE_TEXCOORDTRANSFORM 5
#define VERTEX_PHASE_TEXGENREFLECTION 6
#define VERTEX_PHASE_TEXGENNORMAL 7
#define VERTEX_PHASE_POINTSIZE 8
#define VERTEX_PHASE_FOG 9
#define VERTEX_PHASE_CLIPPLANE 10

/* Definitions for the bitfield of features. Current scheme assumes < 32 bits worth of features. */
/*  - PHASE masks is the collection of all feature bits within that group. Always in word 0, offset 0 */
/*  - FEATURE masks cover the bits used by a single feature. Always in word 0, at a given mask */
/* These bits are used for setting up the VERTEX_SHADERGEN_FEATURE_* bits, as well as inside the shadergenerator */

#define _VERTEX_PHASE_TRANSFORM_MASK   0xfU
#define _VERTEX_PHASE_TRANSFORM_OFFSET 0x0U
#define _VERTEX_FEATURE_TRANSFORM_NORMALIZE_MASK 0x1U
#define _VERTEX_FEATURE_TRANSFORM_NORMALIZE_OFFSET 0
#define _VERTEX_FEATURE_TRANSFORM_EYESPACENORMAL_MASK 0x1U
#define _VERTEX_FEATURE_TRANSFORM_EYESPACENORMAL_OFFSET 1
#define _VERTEX_FEATURE_TRANSFORM_EYESPACEPOS_MASK 0x1U
#define _VERTEX_FEATURE_TRANSFORM_EYESPACEPOS_OFFSET 2
#define _VERTEX_FEATURE_TRANSFORM_SKINNING_MASK 0x1U
#define _VERTEX_FEATURE_TRANSFORM_SKINNING_OFFSET 3
#define _VERTEX_PHASE_LIGHTING_MASK   0x7fU
#define _VERTEX_PHASE_LIGHTING_OFFSET 0x4U
#define _VERTEX_FEATURE_LIGHTING_COLORMATERIAL_MASK 0x1U
#define _VERTEX_FEATURE_LIGHTING_COLORMATERIAL_OFFSET 4
#define _VERTEX_FEATURE_LIGHTING_ATTENUATION_MASK 0x1U
#define _VERTEX_FEATURE_LIGHTING_ATTENUATION_OFFSET 5
#define _VERTEX_FEATURE_LIGHTING_SPECULAR_MASK 0x1U
#define _VERTEX_FEATURE_LIGHTING_SPECULAR_OFFSET 6
#define _VERTEX_FEATURE_LIGHTING_SPOTLIGHT_MASK 0x1U
#define _VERTEX_FEATURE_LIGHTING_SPOTLIGHT_OFFSET 7
#define _VERTEX_FEATURE_LIGHTING_TWOSIDED_MASK 0x1U
#define _VERTEX_FEATURE_LIGHTING_TWOSIDED_OFFSET 8
#define _VERTEX_FEATURE_LIGHTING_NUMLIGHTS_MASK 0x3U
#define _VERTEX_FEATURE_LIGHTING_NUMLIGHTS_OFFSET 9
#define _VERTEX_PHASE_POINTSIZE_MASK   0x3U
#define _VERTEX_PHASE_POINTSIZE_OFFSET 0xbU
#define _VERTEX_FEATURE_POINTSIZE_ATTENUATION_MASK 0x1U
#define _VERTEX_FEATURE_POINTSIZE_ATTENUATION_OFFSET 11
#define _VERTEX_FEATURE_POINTSIZE_COPY_MASK 0x1U
#define _VERTEX_FEATURE_POINTSIZE_COPY_OFFSET 12
#define _VERTEX_PHASE_FOG_MASK   0x3U
#define _VERTEX_PHASE_FOG_OFFSET 0xdU
#define _VERTEX_FEATURE_FOG_DIST_MASK 0x3U
#define _VERTEX_FEATURE_FOG_DIST_OFFSET 13
#define _VERTEX_PHASE_CLIPPLANE_MASK   0x1U
#define _VERTEX_PHASE_CLIPPLANE_OFFSET 0xfU
#define _VERTEX_FEATURE_CLIPPLANE_PLANE0_MASK 0x1U
#define _VERTEX_FEATURE_CLIPPLANE_PLANE0_OFFSET 15

/* Enum values that can be placed into vertex_shadergen_encode/decode. */
/* They complement the ones found inside shadergen_state.h . The only */
/* reason they are defined here is that subword 0 depend on the autogenerated locations */
/* provided by the piecegen, and the featurebits are part of that. */
#define VERTEX_SHADERGEN_FEATURES_TRANSFORM                       0, _VERTEX_PHASE_TRANSFORM_MASK, _VERTEX_PHASE_TRANSFORM_OFFSET
#define VERTEX_SHADERGEN_FEATURE_TRANSFORM_NORMALIZE              0, _VERTEX_FEATURE_TRANSFORM_NORMALIZE_MASK, _VERTEX_FEATURE_TRANSFORM_NORMALIZE_OFFSET
#define VERTEX_SHADERGEN_FEATURE_TRANSFORM_EYESPACENORMAL         0, _VERTEX_FEATURE_TRANSFORM_EYESPACENORMAL_MASK, _VERTEX_FEATURE_TRANSFORM_EYESPACENORMAL_OFFSET
#define VERTEX_SHADERGEN_FEATURE_TRANSFORM_EYESPACEPOS            0, _VERTEX_FEATURE_TRANSFORM_EYESPACEPOS_MASK, _VERTEX_FEATURE_TRANSFORM_EYESPACEPOS_OFFSET
#define VERTEX_SHADERGEN_FEATURE_TRANSFORM_SKINNING               0, _VERTEX_FEATURE_TRANSFORM_SKINNING_MASK, _VERTEX_FEATURE_TRANSFORM_SKINNING_OFFSET
#define VERTEX_SHADERGEN_FEATURES_LIGHTING                        0, _VERTEX_PHASE_LIGHTING_MASK, _VERTEX_PHASE_LIGHTING_OFFSET
#define VERTEX_SHADERGEN_FEATURE_LIGHTING_COLORMATERIAL           0, _VERTEX_FEATURE_LIGHTING_COLORMATERIAL_MASK, _VERTEX_FEATURE_LIGHTING_COLORMATERIAL_OFFSET
#define VERTEX_SHADERGEN_FEATURE_LIGHTING_ATTENUATION             0, _VERTEX_FEATURE_LIGHTING_ATTENUATION_MASK, _VERTEX_FEATURE_LIGHTING_ATTENUATION_OFFSET
#define VERTEX_SHADERGEN_FEATURE_LIGHTING_SPECULAR                0, _VERTEX_FEATURE_LIGHTING_SPECULAR_MASK, _VERTEX_FEATURE_LIGHTING_SPECULAR_OFFSET
#define VERTEX_SHADERGEN_FEATURE_LIGHTING_SPOTLIGHT               0, _VERTEX_FEATURE_LIGHTING_SPOTLIGHT_MASK, _VERTEX_FEATURE_LIGHTING_SPOTLIGHT_OFFSET
#define VERTEX_SHADERGEN_FEATURE_LIGHTING_TWOSIDED                0, _VERTEX_FEATURE_LIGHTING_TWOSIDED_MASK, _VERTEX_FEATURE_LIGHTING_TWOSIDED_OFFSET
#define VERTEX_SHADERGEN_FEATURE_LIGHTING_NUMLIGHTS               0, _VERTEX_FEATURE_LIGHTING_NUMLIGHTS_MASK, _VERTEX_FEATURE_LIGHTING_NUMLIGHTS_OFFSET
#define VERTEX_SHADERGEN_FEATURES_POINTSIZE                       0, _VERTEX_PHASE_POINTSIZE_MASK, _VERTEX_PHASE_POINTSIZE_OFFSET
#define VERTEX_SHADERGEN_FEATURE_POINTSIZE_ATTENUATION            0, _VERTEX_FEATURE_POINTSIZE_ATTENUATION_MASK, _VERTEX_FEATURE_POINTSIZE_ATTENUATION_OFFSET
#define VERTEX_SHADERGEN_FEATURE_POINTSIZE_COPY                   0, _VERTEX_FEATURE_POINTSIZE_COPY_MASK, _VERTEX_FEATURE_POINTSIZE_COPY_OFFSET
#define VERTEX_SHADERGEN_FEATURES_FOG                             0, _VERTEX_PHASE_FOG_MASK, _VERTEX_PHASE_FOG_OFFSET
#define VERTEX_SHADERGEN_FEATURE_FOG_DIST                         0, _VERTEX_FEATURE_FOG_DIST_MASK, _VERTEX_FEATURE_FOG_DIST_OFFSET
#define VERTEX_SHADERGEN_FEATURES_CLIPPLANE                       0, _VERTEX_PHASE_CLIPPLANE_MASK, _VERTEX_PHASE_CLIPPLANE_OFFSET
#define VERTEX_SHADERGEN_FEATURE_CLIPPLANE_PLANE0                 0, _VERTEX_FEATURE_CLIPPLANE_PLANE0_MASK, _VERTEX_FEATURE_CLIPPLANE_PLANE0_OFFSET

typedef enum {
	NORMALIZE_OFF,
	NORMALIZE_NORMALIZE
} transform_normalize;

typedef enum {
	COLORMATERIAL_OFF,
	COLORMATERIAL_AMBIENTDIFFUSE
} lighting_colormaterial;

typedef enum {
	NUMLIGHTS_OFF,
	NUMLIGHTS_ZERO,
	NUMLIGHTS_ONE,
	NUMLIGHTS_MANY
} lighting_numlights;

typedef enum {
	DIST_OFF,
	DIST_ON,
	DIST_ADD
} fog_dist;

/* Uniforms */
#define VERTEX_UNIFORM_POS_ModelView 108
#define VERTEX_UNIFORM_POS_ModelViewProjViewport 124
#define VERTEX_UNIFORM_POS_gl_mali_ViewportTransform 140
#define VERTEX_UNIFORM_POS_ClipPlaneCoefficients 148
#define VERTEX_UNIFORM_POS_gl_mali_PointSizeParameters 152
#define VERTEX_UNIFORM_POS_MaterialEmissive 156
#define VERTEX_UNIFORM_POS_FogAdd 159
#define VERTEX_UNIFORM_POS_PointSizeAttenuationCoefs 160
#define VERTEX_UNIFORM_POS_FogFactor 163
#define VERTEX_UNIFORM_POS_SceneAmbient 164
#define VERTEX_UNIFORM_POS_MaterialDiffuseAlpha 167
#define VERTEX_UNIFORM_POS_SceneColor 168
#define VERTEX_UNIFORM_POS_NumBones 171
#define VERTEX_UNIFORM_POS_NumTextureMatrices 172
#define VERTEX_UNIFORM_POS_LightPosition 176
#define VERTEX_UNIFORM_POS_NormalMatrix 208
#define VERTEX_UNIFORM_POS_LightSpotCosCutoffAngle 211
#define VERTEX_UNIFORM_POS_LightAmbient 220
#define VERTEX_UNIFORM_POS_LightSpotExponent 243
#define VERTEX_UNIFORM_POS_LightAttenuation 252
#define VERTEX_UNIFORM_POS_MaterialSpecularExponent 275
#define VERTEX_UNIFORM_POS_NumLights 279
#define VERTEX_UNIFORM_POS_LightDiffuse 284
#define VERTEX_UNIFORM_POS_LightSpecular 316
#define VERTEX_UNIFORM_POS_LightSpotDirection 348
#define VERTEX_UNIFORM_POS_TextureMatrices 380
#define VERTEX_UNIFORM_POS_SkinningMatrices 508
#define VERTEX_UNIFORM_POS_ProjViewport 1020

/* Uniform groups */
#define VERTEX_UNIFORM_GROUP_POS_constant 0
#define VERTEX_UNIFORM_GROUP_SIZE_constant 108
#define VERTEX_UNIFORM_GROUP_POS_basic 108
#define VERTEX_UNIFORM_GROUP_SIZE_basic 65
#define VERTEX_UNIFORM_GROUP_POS_lighting 176
#define VERTEX_UNIFORM_GROUP_SIZE_lighting 204
#define VERTEX_UNIFORM_GROUP_POS_textrans 380
#define VERTEX_UNIFORM_GROUP_SIZE_textrans 128
#define VERTEX_UNIFORM_GROUP_POS_zkinning 508
#define VERTEX_UNIFORM_GROUP_SIZE_zkinning 528

/* Varyings */
#define VERTEX_VARYING_POS_gl_Position 8
#define VERTEX_VARYING_POS_gl_PointSize 48
#define VERTEX_VARYING_POS_var_TexCoord0 16
#define VERTEX_VARYING_POS_var_TexCoord1 20
#define VERTEX_VARYING_POS_var_TexCoord2 24
#define VERTEX_VARYING_POS_var_TexCoord3 28
#define VERTEX_VARYING_POS_var_TexCoord4 32
#define VERTEX_VARYING_POS_var_TexCoord5 36
#define VERTEX_VARYING_POS_var_TexCoord6 40
#define VERTEX_VARYING_POS_var_TexCoord7 44
#define VERTEX_VARYING_POS_var_PrimaryColor 12
#define VERTEX_VARYING_POS_var_FogDist 50
#define VERTEX_VARYING_POS_var_ClipPlaneSignedDist 49
#define VERTEX_VARYING_POS_var_PrimaryColorTwosided 0

/* Attributes */
#define VERTEX_ATTRIBUTE_POS_attr_Position 0
#define VERTEX_ATTRIBUTE_POS_attr_PrimaryColor 4
#define VERTEX_ATTRIBUTE_POS_attr_SkinningIndices 8
#define VERTEX_ATTRIBUTE_POS_attr_SkinningWeights 12
#define VERTEX_ATTRIBUTE_POS_attr_TexCoord0 16
#define VERTEX_ATTRIBUTE_POS_attr_TexCoord1 20
#define VERTEX_ATTRIBUTE_POS_attr_TexCoord2 24
#define VERTEX_ATTRIBUTE_POS_attr_TexCoord3 28
#define VERTEX_ATTRIBUTE_POS_attr_TexCoord4 32
#define VERTEX_ATTRIBUTE_POS_attr_TexCoord5 36
#define VERTEX_ATTRIBUTE_POS_attr_TexCoord6 40
#define VERTEX_ATTRIBUTE_POS_attr_TexCoord7 44
#define VERTEX_ATTRIBUTE_POS_attr_Normal 48
#define VERTEX_ATTRIBUTE_POS_attr_PointSize 52

const piece *_piecegen_get_piece(unsigned phase, unsigned features);
const piece *_piecegen_get_indexed_piece(unsigned phase, unsigned features, unsigned index);
const uniform_initializer *_piecegen_get_uniform_initializers(unsigned *n_inits);
const unsigned *_piecegen_get_serialized_data(unsigned *n_words);

#endif
